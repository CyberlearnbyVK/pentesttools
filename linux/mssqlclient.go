package main

import _ "github.com/denisenkom/go-mssqldb"
import "database/sql"
import "log"
import "fmt"
import "flag"
/*
docker run  --rm -it -v ${PWD}:/go golang:stretch env  GO111MODULE=on GOPROXY=https://goproxy.io GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -ldflags -s -a -installsuffix cgo ms.go
*/
var debug = flag.Bool("d", false, "enable debugging")
var password = flag.String("P", "", "the database password")
var query	= flag.String("Q","select @@version","\"cmdline query\" ")
var server = flag.String("S", "127.0.0.1", "the database server")
var user = flag.String("U", "sa", "the database user")

func main() {
	flag.Parse() // parse the command line args

	if *debug {
		fmt.Printf(" password:%s\n", *password)
		fmt.Printf(" server:%s\n", *server)
		fmt.Printf(" user:%s\n", *user)
		fmt.Printf(" user:%s\n", *query)
	}

	connString := fmt.Sprintf("server=%s;user id=%s;password=%s;port=1433;encrypt=disable", *server, *user, *password)
	if *debug {
		fmt.Printf(" connString:%s\n", connString)
	}
	conn, err := sql.Open("mssql", connString)
	if err != nil {
		log.Fatal("Open connection failed:", err.Error())
	}
	defer conn.Close()
	stmt, err := conn.Prepare(*query)
	if err != nil {
		log.Fatal("Prepare failed:", err.Error())
	}
	defer stmt.Close()

	row := stmt.QueryRow()
	//var somenumber int64
	var somechars string
	err = row.Scan( &somechars)
	if err != nil {
		log.Fatal("Query failed:", err.Error())
	}
	fmt.Printf("-----------------------------------------------------------------\n")
	fmt.Printf("%s\n", somechars)
	fmt.Printf("-----------------------------------------------------------------\n")
	fmt.Printf("bye\n")

}